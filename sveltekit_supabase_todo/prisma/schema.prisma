generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String?          @unique
  full_name        String?
  avatar_url       String?
  phone_number     String?
  email            String?
  birthday         DateTime?        @db.Date
  role             String?
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?        @db.Timestamptz(6)
  Comment          Comment[]
  Community         Community[]
  contents         Content[]
  faqs             FAQ[]
  investors        investor[]
  project_managers ProjectManager[]
  Project          Project[]
  schedules        Schedule[]
  todos            Todo[]

  @@map("users")
}

model Company {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String?
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?        @db.Timestamptz(6)
  project_managers ProjectManager[]
  projects         Project[]

  @@map("companies")
}

model ProjectManager {
  companyId  String    @map("company_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  role       String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  company    Company   @relation(fields: [companyId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@id([companyId, userId])
  @@map("project_managers")
}

model Todo {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String?
  userId     String?   @map("user_id") @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  user       User?     @relation(fields: [userId], references: [id])

  @@map("todos")
}

model Project {
  id                         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String?
  description                String?
  category                   String?
  status                     String?
  start_date                 DateTime?  @db.Timestamptz(6)
  end_date                   DateTime?  @db.Timestamptz(6)
  invest_amounts             Int?       @default(0)
  min_invest_amounts         Int?       @default(0)
  max_invest_amounts         Int?       @default(0)
  invest_detail_type         String?
  repayment_method           String?
  assignment_completion_date DateTime?  @db.Timestamptz(6)
  thumbnail                  String?
  images                     String[]
  acceped_at                 DateTime?  @db.Timestamptz(6)
  rejected_at                DateTime?  @db.Timestamptz(6)
  rejected_reason            String?
  application_result         Json?      @db.Json
  userId                     String     @map("user_id") @db.Uuid
  company_id                 String     @db.Uuid
  created_at                 DateTime   @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?  @db.Timestamptz(6)
  contents                   Content[]
  faqs                       FAQ[]
  investors                  investor[]
  companies                  Company    @relation(fields: [company_id], references: [id])
  user                       User       @relation(fields: [userId], references: [id])
  schedules                  Schedule[]

  @@map("projects")
}

model Comment {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String?
  userId     String?   @map("user_id") @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  user       User?     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Community {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String?
  userId     String?   @map("user_id") @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  user       User?     @relation(fields: [userId], references: [id])

  @@map("communities")
}

model Content {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id  String?   @db.Uuid
  user_id     String    @db.Uuid
  title       String?
  sub_title   String?
  description String?
  order       Int?      @default(0)
  type        String?
  link_url    String?
  thumbnail   String?
  images      String[]
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  project     Project?  @relation(fields: [project_id], references: [id])
  user        User      @relation(fields: [user_id], references: [id])

  @@map("contents")
}

model FAQ {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id String?   @db.Uuid
  user_id    String    @db.Uuid
  question   String?
  answer     String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  project    Project?  @relation(fields: [project_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])

  @@map("faqs")
}

model investor {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status     String?
  acceped_at DateTime? @db.Timestamptz(6)
  project_id String    @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  project    Project   @relation(fields: [project_id], references: [id], map: "investors_project_id_fkey")
  user       User      @relation(fields: [user_id], references: [id], map: "investors_user_id_fkey")

  @@map("investors")
}

model Schedule {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id  String    @db.Uuid
  user_id     String    @db.Uuid
  title       String?
  description String?
  date        DateTime? @db.Timestamptz(6)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  project     Project   @relation(fields: [project_id], references: [id])
  user        User      @relation(fields: [user_id], references: [id])

  @@map("schedules")
}

enum Role {
  USER
  ADMIN
}
